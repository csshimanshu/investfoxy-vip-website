---
import AdminLayout from '../../layouts/AdminLayout.astro';
import content from '../../data/content.json';

interface Testimonial {
  id: string;
  name: string;
  initials: string;
  joinDate: string;
  roi: number;
  quote: string;
  profilePhoto?: string | null;
}

const testimonials = content.testimonials as Testimonial[];
---

<AdminLayout title="Manage Testimonials">
  <div class="space-y-6">
    <!-- Add New Testimonial -->
    <div class="bg-white shadow sm:rounded-lg">
      <div class="px-4 py-5 sm:p-6">
        <h3 class="text-lg leading-6 font-medium text-gray-900">Add New Testimonial</h3>
        <form id="add-testimonial-form" class="mt-5 space-y-4">
          <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
            <div>
              <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
              <input
                type="text"
                name="name"
                id="name"
                required
                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary sm:text-sm"
              />
            </div>
            <div>
              <label for="initials" class="block text-sm font-medium text-gray-700">Initials</label>
              <input
                type="text"
                name="initials"
                id="initials"
                required
                maxlength="2"
                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary sm:text-sm"
              />
            </div>
          </div>
          <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
            <div>
              <label for="joinDate" class="block text-sm font-medium text-gray-700">Join Year</label>
              <input
                type="text"
                name="joinDate"
                id="joinDate"
                required
                pattern="20[0-9]{2}"
                placeholder="YYYY"
                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary sm:text-sm"
              />
            </div>
            <div>
              <label for="roi" class="block text-sm font-medium text-gray-700">ROI (%)</label>
              <input
                type="number"
                name="roi"
                id="roi"
                required
                min="0"
                step="0.1"
                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary sm:text-sm"
              />
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700">Profile Photo</label>
            <div class="mt-1 flex items-center space-x-4">
              <div class="relative h-24 w-24 rounded-full overflow-hidden bg-gray-100">
                <img id="profile-preview" src="/placeholder-avatar.png" alt="Profile preview" class="h-full w-full object-cover">
              </div>
              <div class="flex flex-col space-y-2">
                <label class="relative cursor-pointer bg-white rounded-md font-medium text-primary hover:text-primary-dark focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-primary">
                  <span>Upload a photo</span>
                  <input 
                    id="profile-photo" 
                    name="profilePhoto" 
                    type="file" 
                    accept="image/*"
                    class="sr-only"
                  />
                </label>
                <p class="text-xs text-gray-500">PNG, JPG up to 2MB</p>
              </div>
            </div>
          </div>
          <div>
            <label for="quote" class="block text-sm font-medium text-gray-700">Testimonial Quote</label>
            <textarea
              name="quote"
              id="quote"
              rows="3"
              required
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary sm:text-sm"
            ></textarea>
          </div>
          <div class="flex justify-end">
            <button
              type="submit"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
            >
              Add Testimonial
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Existing Testimonials -->
    <div class="bg-white shadow sm:rounded-lg">
      <div class="px-4 py-5 sm:p-6">
        <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Existing Testimonials</h3>
        <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
          {testimonials.map((testimonial) => (
            <div class="bg-gray-50 rounded-lg p-6 relative">
              <button
                class="delete-testimonial absolute top-2 right-2 text-red-600 hover:text-red-900"
                data-testimonial-id={testimonial.id}
                title="Delete testimonial"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </button>
              <button
                class="edit-testimonial absolute top-2 right-10 text-blue-600 hover:text-blue-900"
                data-testimonial-id={testimonial.id}
                title="Edit testimonial"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                </svg>
              </button>
              <div class="flex items-center space-x-3 mb-4">
                <div class="flex-shrink-0">
                  {testimonial.profilePhoto ? (
                    <img 
                      src={testimonial.profilePhoto} 
                      alt={testimonial.name} 
                      class="h-10 w-10 rounded-full object-cover"
                    />
                  ) : (
                    <div class="h-10 w-10 rounded-full bg-primary text-white flex items-center justify-center">
                      {testimonial.initials}
                    </div>
                  )}
                </div>
                <div>
                  <h4 class="text-lg font-medium text-gray-900">{testimonial.name}</h4>
                  <p class="text-sm text-gray-500">Member since {testimonial.joinDate}</p>
                </div>
              </div>
              <div class="mb-4">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                  +{testimonial.roi}% ROI
                </span>
              </div>
              <p class="text-gray-700 text-sm">{testimonial.quote}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Modal -->
  <div id="edit-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-2/3 lg:w-1/2 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <h3 class="text-lg leading-6 font-medium text-gray-900">Edit Testimonial</h3>
        <form id="edit-testimonial-form" class="mt-4">
          <input type="hidden" id="edit-id" name="id">
          <div class="grid grid-cols-1 gap-4">
            <div>
              <label for="edit-name" class="block text-sm font-medium text-gray-700">Name</label>
              <input type="text" id="edit-name" name="name" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            </div>
            <div>
              <label for="edit-initials" class="block text-sm font-medium text-gray-700">Initials</label>
              <input type="text" id="edit-initials" name="initials" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            </div>
            <div>
              <label for="edit-joinDate" class="block text-sm font-medium text-gray-700">Join Date</label>
              <input type="text" id="edit-joinDate" name="joinDate" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            </div>
            <div>
              <label for="edit-roi" class="block text-sm font-medium text-gray-700">ROI</label>
              <input type="number" id="edit-roi" name="roi" step="0.01" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            </div>
            <div>
              <label for="edit-quote" class="block text-sm font-medium text-gray-700">Quote</label>
              <textarea id="edit-quote" name="quote" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"></textarea>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700">Current Profile Photo</label>
              <img id="edit-profile-preview" src="/placeholder-avatar.png" alt="Profile preview" class="mt-1 h-32 w-32 object-cover rounded-full">
            </div>
            <div>
              <label for="edit-profile-photo" class="block text-sm font-medium text-gray-700">Update Profile Photo</label>
              <input type="file" id="edit-profile-photo" name="profilePhoto" accept="image/*" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100">
            </div>
          </div>
          <div class="mt-5 flex justify-end gap-2">
            <button type="button" class="close-modal px-4 py-2 bg-gray-100 text-gray-800 rounded-md hover:bg-gray-200">Cancel</button>
            <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">Save Changes</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script is:inline define:vars={{ testimonials }}>
    // Client-side testimonials data
    const testimonialsData = testimonials;
    
    // Handle edit testimonial
    document.querySelectorAll('.edit-testimonial').forEach((button) => {
      button.addEventListener('click', (e) => {
        const target = e.currentTarget;
        const testimonialId = target.dataset.testimonialId;
        const testimonial = testimonialsData.find((t) => t.id === testimonialId);
        if (testimonial) {
          const modal = document.getElementById('edit-modal');
          if (modal) {
            modal.classList.remove('hidden');
            const form = document.getElementById('edit-testimonial-form');
            if (form) {
              const idInput = document.getElementById('edit-id');
              const nameInput = document.getElementById('edit-name');
              const initialsInput = document.getElementById('edit-initials');
              const joinDateInput = document.getElementById('edit-joinDate');
              const roiInput = document.getElementById('edit-roi');
              const quoteInput = document.getElementById('edit-quote');
              const profilePreview = document.getElementById('edit-profile-preview');
              
              if (idInput) idInput.value = testimonial.id;
              if (nameInput) nameInput.value = testimonial.name;
              if (initialsInput) initialsInput.value = testimonial.initials;
              if (joinDateInput) joinDateInput.value = testimonial.joinDate;
              if (roiInput) roiInput.value = testimonial.roi.toString();
              if (quoteInput) quoteInput.value = testimonial.quote;
              if (profilePreview && testimonial.profilePhoto) {
                profilePreview.src = testimonial.profilePhoto;
              } else if (profilePreview) {
                profilePreview.src = '/placeholder-avatar.png';
              }
            }
          }
        }
      });
    });

    // Handle delete testimonial
    document.querySelectorAll('.delete-testimonial').forEach((button) => {
      button.addEventListener('click', async (e) => {
        if (confirm('Are you sure you want to delete this testimonial?')) {
          const target = e.currentTarget;
          const testimonialId = target.dataset.testimonialId;
          try {
            const response = await fetch(`/api/testimonials/${testimonialId}`, {
              method: 'DELETE',
              headers: {
                'Accept': 'application/json'
              }
            });
            
            if (!response.ok) {
              const responseText = await response.text();
              try {
                const errorData = JSON.parse(responseText);
                throw new Error(errorData.details || 'Failed to delete testimonial');
              } catch (parseError) {
                console.error('Error parsing response:', parseError);
                throw new Error(responseText || 'Failed to delete testimonial');
              }
            }

            // Refresh the page after successful deletion
            window.location.reload();
          } catch (error) {
            console.error('Error deleting testimonial:', error);
            alert(`Error deleting testimonial: ${error.message || 'Unknown error'}`);
          }
        }
      });
    });

    // Handle profile photo preview for edit form
    const editPhotoInput = document.getElementById('edit-profile-photo');
    if (editPhotoInput) {
      editPhotoInput.addEventListener('change', (e) => {
        const input = e.target;
        const file = input?.files?.[0];
        if (file) {
          if (file.size > 2 * 1024 * 1024) {
            alert('File size must be less than 2MB');
            input.value = '';
            return;
          }
          
          if (!file.type.startsWith('image/')) {
            alert('File must be an image');
            input.value = '';
            return;
          }
          
          const reader = new FileReader();
          reader.onload = (e) => {
            const preview = document.getElementById('edit-profile-preview');
            if (preview && e.target?.result) {
              preview.src = e.target.result;
            }
          };
          reader.onerror = (e) => {
            console.error('FileReader error:', e);
            alert('Failed to read file');
          };
          reader.readAsDataURL(file);
        }
      });
    }

    // Handle edit form submission
    const editForm = document.getElementById('edit-testimonial-form');
    if (editForm) {
      editForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        try {
          const formData = new FormData(e.target);
          const testimonialId = formData.get('id');
          const testimonialData = {
            name: formData.get('name'),
            initials: formData.get('initials'),
            joinDate: formData.get('joinDate'),
            roi: formData.get('roi'),
            quote: formData.get('quote')
          };

          // Handle profile photo
          const photoInput = document.getElementById('edit-profile-photo');
          if (photoInput?.files?.[0]) {
            const file = photoInput.files[0];
            const reader = new FileReader();
            const photoPromise = new Promise((resolve, reject) => {
              reader.onload = () => resolve(reader.result);
              reader.onerror = reject;
              reader.readAsDataURL(file);
            });

            try {
              testimonialData.profilePhoto = file.name;
              testimonialData.profilePhotoData = await photoPromise;
            } catch (error) {
              console.error('Error reading profile photo:', error);
              throw new Error('Failed to process profile photo');
            }
          }

          const response = await fetch(`/api/testimonials/${testimonialId}`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(testimonialData)
          });

          const responseText = await response.text();
          console.log('Response status:', response.status);
          console.log('Response text:', responseText);

          if (!response.ok) {
            try {
              const errorData = JSON.parse(responseText);
              throw new Error(errorData.details || 'Failed to update testimonial');
            } catch (parseError) {
              console.error('Error parsing response:', parseError);
              throw new Error(responseText || 'Failed to update testimonial');
            }
          }

          let result;
          try {
            result = JSON.parse(responseText);
          } catch (parseError) {
            console.error('Error parsing success response:', parseError);
            throw new Error('Invalid response from server');
          }

          console.log('Success:', result);
          window.location.reload();
        } catch (error) {
          console.error('Error updating testimonial:', error);
          alert(`Error updating testimonial: ${error.message || 'Unknown error'}`);
        }
      });
    }

    // Handle close modal
    document.querySelectorAll('.close-modal').forEach((button) => {
      button.addEventListener('click', () => {
        const modal = document.getElementById('edit-modal');
        if (modal) {
          modal.classList.add('hidden');
        }
      });
    });
  </script>
</AdminLayout>
